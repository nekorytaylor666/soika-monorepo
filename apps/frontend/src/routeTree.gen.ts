/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerifyOtpImport } from './routes/verifyOtp'
import { Route as TestImport } from './routes/test'
import { Route as OnboardingImport } from './routes/onboarding'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as DashboardTasksIndexImport } from './routes/dashboard/tasks/index'
import { Route as DashboardSchedulesIndexImport } from './routes/dashboard/schedules/index'
import { Route as DashboardLotsIndexImport } from './routes/dashboard/lots/index'
import { Route as DashboardBoardsIndexImport } from './routes/dashboard/boards/index'
import { Route as DashboardTasksTaskIdImport } from './routes/dashboard/tasks/$taskId'
import { Route as DashboardLotsLotIdImport } from './routes/dashboard/lots/$lotId'
import { Route as DashboardDealsDealIdImport } from './routes/dashboard/deals/$dealId'
import { Route as DashboardCandidateRecommendedIdImport } from './routes/dashboard/candidate/$recommendedId'
import { Route as DashboardBoardsBoardIdImport } from './routes/dashboard/boards/$boardId'
import { Route as DashboardRecommendationsRecommendedIdRouteImport } from './routes/dashboard/recommendations/$recommendedId/route'
import { Route as DashboardSchedulesResultsResultIdImport } from './routes/dashboard/schedules/results/$resultId'
import { Route as DashboardRecommendationsRecommendedIdLotIdImport } from './routes/dashboard/recommendations/$recommendedId/$lotId'

// Create Virtual Routes

const KanbanLazyImport = createFileRoute('/kanban')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const DashboardIndexLazyImport = createFileRoute('/dashboard/')()

// Create/Update Routes

const KanbanLazyRoute = KanbanLazyImport.update({
  path: '/kanban',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/kanban.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const VerifyOtpRoute = VerifyOtpImport.update({
  path: '/verifyOtp',
  getParentRoute: () => rootRoute,
} as any)

const TestRoute = TestImport.update({
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const OnboardingRoute = OnboardingImport.update({
  path: '/onboarding',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardIndexLazyRoute = DashboardIndexLazyImport.update({
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)

const DashboardTasksIndexRoute = DashboardTasksIndexImport.update({
  path: '/tasks/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardSchedulesIndexRoute = DashboardSchedulesIndexImport.update({
  path: '/schedules/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardLotsIndexRoute = DashboardLotsIndexImport.update({
  path: '/lots/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardBoardsIndexRoute = DashboardBoardsIndexImport.update({
  path: '/boards/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardTasksTaskIdRoute = DashboardTasksTaskIdImport.update({
  path: '/tasks/$taskId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardLotsLotIdRoute = DashboardLotsLotIdImport.update({
  path: '/lots/$lotId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardDealsDealIdRoute = DashboardDealsDealIdImport.update({
  path: '/deals/$dealId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardCandidateRecommendedIdRoute =
  DashboardCandidateRecommendedIdImport.update({
    path: '/candidate/$recommendedId',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

const DashboardBoardsBoardIdRoute = DashboardBoardsBoardIdImport.update({
  path: '/boards/$boardId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardRecommendationsRecommendedIdRouteRoute =
  DashboardRecommendationsRecommendedIdRouteImport.update({
    path: '/recommendations/$recommendedId',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

const DashboardSchedulesResultsResultIdRoute =
  DashboardSchedulesResultsResultIdImport.update({
    path: '/schedules/results/$resultId',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

const DashboardRecommendationsRecommendedIdLotIdRoute =
  DashboardRecommendationsRecommendedIdLotIdImport.update({
    path: '/$lotId',
    getParentRoute: () => DashboardRecommendationsRecommendedIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/verifyOtp': {
      id: '/verifyOtp'
      path: '/verifyOtp'
      fullPath: '/verifyOtp'
      preLoaderRoute: typeof VerifyOtpImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/kanban': {
      id: '/kanban'
      path: '/kanban'
      fullPath: '/kanban'
      preLoaderRoute: typeof KanbanLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexLazyImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/recommendations/$recommendedId': {
      id: '/dashboard/recommendations/$recommendedId'
      path: '/recommendations/$recommendedId'
      fullPath: '/dashboard/recommendations/$recommendedId'
      preLoaderRoute: typeof DashboardRecommendationsRecommendedIdRouteImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/boards/$boardId': {
      id: '/dashboard/boards/$boardId'
      path: '/boards/$boardId'
      fullPath: '/dashboard/boards/$boardId'
      preLoaderRoute: typeof DashboardBoardsBoardIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/candidate/$recommendedId': {
      id: '/dashboard/candidate/$recommendedId'
      path: '/candidate/$recommendedId'
      fullPath: '/dashboard/candidate/$recommendedId'
      preLoaderRoute: typeof DashboardCandidateRecommendedIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/deals/$dealId': {
      id: '/dashboard/deals/$dealId'
      path: '/deals/$dealId'
      fullPath: '/dashboard/deals/$dealId'
      preLoaderRoute: typeof DashboardDealsDealIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/lots/$lotId': {
      id: '/dashboard/lots/$lotId'
      path: '/lots/$lotId'
      fullPath: '/dashboard/lots/$lotId'
      preLoaderRoute: typeof DashboardLotsLotIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/tasks/$taskId': {
      id: '/dashboard/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/dashboard/tasks/$taskId'
      preLoaderRoute: typeof DashboardTasksTaskIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/boards/': {
      id: '/dashboard/boards/'
      path: '/boards'
      fullPath: '/dashboard/boards'
      preLoaderRoute: typeof DashboardBoardsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/lots/': {
      id: '/dashboard/lots/'
      path: '/lots'
      fullPath: '/dashboard/lots'
      preLoaderRoute: typeof DashboardLotsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/schedules/': {
      id: '/dashboard/schedules/'
      path: '/schedules'
      fullPath: '/dashboard/schedules'
      preLoaderRoute: typeof DashboardSchedulesIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/tasks/': {
      id: '/dashboard/tasks/'
      path: '/tasks'
      fullPath: '/dashboard/tasks'
      preLoaderRoute: typeof DashboardTasksIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/recommendations/$recommendedId/$lotId': {
      id: '/dashboard/recommendations/$recommendedId/$lotId'
      path: '/$lotId'
      fullPath: '/dashboard/recommendations/$recommendedId/$lotId'
      preLoaderRoute: typeof DashboardRecommendationsRecommendedIdLotIdImport
      parentRoute: typeof DashboardRecommendationsRecommendedIdRouteImport
    }
    '/dashboard/schedules/results/$resultId': {
      id: '/dashboard/schedules/results/$resultId'
      path: '/schedules/results/$resultId'
      fullPath: '/dashboard/schedules/results/$resultId'
      preLoaderRoute: typeof DashboardSchedulesResultsResultIdImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  DashboardRouteRoute: DashboardRouteRoute.addChildren({
    DashboardIndexLazyRoute,
    DashboardRecommendationsRecommendedIdRouteRoute:
      DashboardRecommendationsRecommendedIdRouteRoute.addChildren({
        DashboardRecommendationsRecommendedIdLotIdRoute,
      }),
    DashboardBoardsBoardIdRoute,
    DashboardCandidateRecommendedIdRoute,
    DashboardDealsDealIdRoute,
    DashboardLotsLotIdRoute,
    DashboardTasksTaskIdRoute,
    DashboardBoardsIndexRoute,
    DashboardLotsIndexRoute,
    DashboardSchedulesIndexRoute,
    DashboardTasksIndexRoute,
    DashboardSchedulesResultsResultIdRoute,
  }),
  LoginRoute,
  OnboardingRoute,
  TestRoute,
  VerifyOtpRoute,
  AboutLazyRoute,
  KanbanLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login",
        "/onboarding",
        "/test",
        "/verifyOtp",
        "/about",
        "/kanban"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/",
        "/dashboard/recommendations/$recommendedId",
        "/dashboard/boards/$boardId",
        "/dashboard/candidate/$recommendedId",
        "/dashboard/deals/$dealId",
        "/dashboard/lots/$lotId",
        "/dashboard/tasks/$taskId",
        "/dashboard/boards/",
        "/dashboard/lots/",
        "/dashboard/schedules/",
        "/dashboard/tasks/",
        "/dashboard/schedules/results/$resultId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/onboarding": {
      "filePath": "onboarding.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/verifyOtp": {
      "filePath": "verifyOtp.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/kanban": {
      "filePath": "kanban.lazy.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.lazy.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/recommendations/$recommendedId": {
      "filePath": "dashboard/recommendations/$recommendedId/route.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/recommendations/$recommendedId/$lotId"
      ]
    },
    "/dashboard/boards/$boardId": {
      "filePath": "dashboard/boards/$boardId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/candidate/$recommendedId": {
      "filePath": "dashboard/candidate/$recommendedId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/deals/$dealId": {
      "filePath": "dashboard/deals/$dealId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/lots/$lotId": {
      "filePath": "dashboard/lots/$lotId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/tasks/$taskId": {
      "filePath": "dashboard/tasks/$taskId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/boards/": {
      "filePath": "dashboard/boards/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/lots/": {
      "filePath": "dashboard/lots/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/schedules/": {
      "filePath": "dashboard/schedules/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/tasks/": {
      "filePath": "dashboard/tasks/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/recommendations/$recommendedId/$lotId": {
      "filePath": "dashboard/recommendations/$recommendedId/$lotId.tsx",
      "parent": "/dashboard/recommendations/$recommendedId"
    },
    "/dashboard/schedules/results/$resultId": {
      "filePath": "dashboard/schedules/results/$resultId.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
